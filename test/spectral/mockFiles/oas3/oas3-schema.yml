openapi: 3.0
info:
  description: Sample API definition
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  contact:
    email: "apiteam@swagger.io"
servers:
- url: http://petstore.swagger.io/v1
tags:
- name: pets
  description: A pet
paths:
  /pets:
    get:
      summary: List all pets
      description: List all pets
      operationId: get_pets
      tags:
      - pets
      parameters:
      - name: pet_name
        description: return pets with given pet_name
        in: invalid_in
        required: true
        schema:
          type: string
      - name: pet_tag
        description: return pets with given pet_tag
        in: query
        schema:
          type: string
        content:
          application/json:
            schema:
              type: string
      responses: {}
    post:
      summary: create a pet
      description: create a pet
      operationId: create_pets
      tags:
      - pets
      requestBody:
        description: request body should have content
      responses:
        '200':
          $ref: '#/components/responses/PetResponse'
        default:
          # no description
          content:
            application/json:
              type: string
  /pets/{pet_id}:
    get:
      summary: List all pets
      description: List all pets
      operationId: get_pet
      tags:
      - pets
      parameters:
      - name: pet_id
        description: pet id of pet to retrieve
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/PetResponse'
components:
  responses:
    PetResponse:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
    PetsResponse:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pets"
  schemas:
    Pet:
      description: A pet
      properties:
        id:
          type: integer
          format: int64
          description: "id property"
        name:
          type: string
          description: "name property"
        tag:
          type: string
          description: "tag property"
      example:
        id: 1
        name: doggie
        tag: dog
    Pets:
      type: object
      properties:
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
    DiscriminatorNotObject:
      discriminator: ''
    DiscriminatorMissingPropertyNameField:
      discriminator: {}
    DiscriminatorPropertyNameFieldNotAString:
      discriminator:
        propertyName: 1
